package ch8.item52;

/*
 * item52. 다중정의는 신중히 사용하라
 *
 *  오버로딩된 메소드들 중 어떤 메소드를 호출할지는 컴파일타임에 정해짐
 * 런타임에는 타입이 매번 달라지지만, 호출 메소드를 선택하는 데에는 영향을 주지 못함
 *  오버라이딩한 메소드는 동적으로 선택되고, 오버로딩한 메소드는 정적으로 선택됨
 * 메소드를 오버라이딩하면 컴파일타임에서의 인스턴스 타입은 상관없이
 * 재정의한 메소드가 실행됨
 * 오버로딩된 메소드 사이에서는 객체 런타임 타입은 중요하지 않고,
 * 컴파일타임에 매개변수의 타입에 의해 결정됨
 * 따라서 API 사용자가 매개변수를 넘기면 어떤 오버로딩 메소드가 수행될지
 * 혼동을 일으키는 상황을 피해야 함
 *  혼란을 일으키는 상황을 피하려면
 * 1. 매개변수 수가 같은 다중정의는 만들면 안 됨
 * 2. 오버로딩하는 대신 메소드 이름을 다르게 지어주어도 됨
 *
 *  생성자는 다른 이름을 지을 수 없으므로 무조건 오버로딩해야 함
 * 하지만 정적 팩토리라는 대안을 활용할 수 있음
 * 
 *  매개변수 수가 같은 다중정의 메소드가 많더라도
 * 매개변수 중 하나가 근본적으로 다르다면 헷갈리지 않음
 * 근본적으로 다르다는 건 두 타입의 값이 서로 형변환 불가능
 *
 *  자바에 제네릭, 오토박싱, 람다 및 메소드 참조가 추가되어
 * 오버로딩에 혼란을 줌
 *  기술적으로 서로 다른 함수형 인터페이스라도 인수 위치가 같으면 혼란이 생김
 * 메소드를 다중정의할 때, 서로 다른 함수형 인터페이스라도
 * 같은 위치 인수로 받으면 안 됨
 *  자바가 버전업되면서 점점 복잡해지고 있으므로, 모든 것을 이해할 수는 없고
 * 어떤 오버로딩 메소드가 호출되는지 몰라도 기능이 같다면 신경쓰지 않아도 됨
 * 가장 일반적인 방법은 더 일반적인 오버로딩 메소드로 일을 넘기는 것
 * ex)
 * public boolean contentEquals(StringBuffer sb)
 * { return contentEquals((CharSequence) sb); }
 */
public class item52 {
}
