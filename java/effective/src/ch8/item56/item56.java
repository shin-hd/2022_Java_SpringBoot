package ch8.item56;

/*
 * item56. 공개된 API 요소에는 항상 문서화 주석을 작성하라
 *
 *  API를 쓸모 있게 하려면 문서도 추가되어야 함
 * 코드가 바뀔 때마다 API 문서도 함께 수정해야 하는데,
 * 자바의 자바독이 소스코드 파일에서 문서화 주석을 API 문서로 변환해줌
 *  따라서 API를 문서화하려면 공개된 모든 클래스, 인터페이스, 메소드,
 * 필드 선언에 문서화 주석을 달아야 함
 *  API 문서를 작성한 본인 뿐만 아니라
 * 팀원이나 다른 팀 (특히 개발팀 유지보수팀이 별개라면),
 * 사용자, 구매자도 보기 떄문에 중요함
 *
 *  메소드용 문서화 주석에는 메소드가 '무엇을 하는지'를 기술해야 함
 * 메소드 호출의 전제조건과 사후조건, 부작용 모두 문서화해야 함
 * @param @return @throws
 *
 *  자바독 유틸리티는 문서화 주석을 HTML로 반환하므로
 * HTML 태그가 적용됨
 *
 *  {@code} 태그의 효과
 * 1. 태그로 감싼 내용을 코드용 폰트로 렌더링
 * 2. 태그로 감싼 내용에 포함된 HTML 요소나 다른 자바독 태그를 무시
 *
 *  클래스를 상속용으로 설계할 때는 자기사용 패턴에 대해서도 문서에 남겨
 * 다른 프로그래머가 그 메소드를 재정의하는 방법을 알려줘야 함
 * @implSpec 태그로 문서화
 * 하위 클래스들이 상속하거나 super로 호출할 때
 * 메소드가 어떻게 동작하는지 인지하도록
 *
 *  API 설명에 HTML 메타문자 포함시키려면 {@literal} 태그로 감싸기
 *
 *  문서화 주석 첫 문장은 해당 요소의 요약 설명
 * 요약 설명은 대상의 고유한 기술을 설명해야 함
 * 문장의 첫 마침표까지가 요약 설명이 되므로 그 전 마침표는 {@literal}로 감싸거나
 * {@summary} 태그를 사용하면 편함
 *
 *  문서화 주석에서 제네릭 타입이나 메소드를 문서화할 때는
 * 모든 타입 매개변수에 주석을 달아야 함
 *
 *  열거 타입을 문서화할 때는 상수들에도 주석을 달아야 함
 * 
 *  어노테이션 타입 문서화할 때는 멤버들에 모두 주석을 달아야 함
 *
 *  패키지 설명 주석은 package-info.java 파일에 작성
 *  모듈 설명은 module-info.java 파일에 작성
 *
 *  클래스나 정적 메소드가 스레드 안전하든 아니든,
 * 스레드 안전 수준을 반드시 API 설명에 포함해야 함
 * 직렬화 가능한 클래스라면 직렬화 형태도 기술해야 함
 * 
 *  메소드 주석도 상속이 가능한데,
 * 문서화 주석이 없는 API 요소가 있으면 자바독이 가장 가까운 문서화 주석을 찾아줌
 * 이 때 클래스보다 인터페이스가 우선순위
 *
 *  {@inheritDoc} 태그로 문서화 주석 상속 가능
 *
 *  문서가 잘 쓰였는지 확인하는 유일한 방법은
 * 자바독 유틸리티가 생성한 웹페이지를 읽어보는 것
 * 읽어봐야 고칠 곳이 눈에 보임
 */
public class item56 {
}
