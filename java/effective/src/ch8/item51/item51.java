package ch8.item51;

/*
 * item51. 메소드 시그니처를 신중히 설계하라
 *
 *  API 설계 요령
 * 1. 메소드 이름을 신중히 짓자
 *    표준 명명 규칙을 따르고 일관성이 있어야 이해하기 쉬움
 * 2. 편의 메소드를 너무 많이 만들지 말자
 *    메소드가 너무 많으면 배우고 쓰기에도, 문서화하고 유지보수하기에도 어려움
 * 3. 매개변수 목록은 짧게 유지하자
 *    4개가 넘어가거나 같은 타입이 연달아 나오면 순서를 기억하기 어렵고
 *    실수하기 쉬움
 * 
 *  과하게 긴 매개변수 목록을 짧게 줄여주는 기술
 * 1) 여러 메소드로 쪼개기
 *    잘못하면 메소드가 너무 많아질 수도 있지만,
 *    직교성(orthogonality)을 높여(중복제거) 메소드 수가 줄어드는 효과를 가져옴
 * 2) 매개변수 여러 개를 묶어주는 도우미 클래스 만들기
 *    이런 도우미 클래스는 정적 멤버 클래스
 *    잇다른 매개변수 몇 개를 독립된 하나의 개념으로 볼 수 있을 때 사용하는 기법
 * 3) 빌더 패턴을 메소드 호출에 응용
 *    매개변수가 많고 일부가 생략 가능할 때 쓸만함
 *    모든 매개변수를 추상화한 객체 정의,
 *    클라이언트에서 이 객체의 세터 메소드 호출해 값 설정
 *    매개변수를 다 설정한 다음 execute 메소드를 호출해 유효성검사
 *    설정 완료된 객체를 넘겨 계산 수행
 *
 * 4. 매개변수 타입은 클래스보다는 인터페이스가 나음
 *    인터페이스 대신 클래스를 사용하면 클라이언트에게
 *    특정 구현체만 사용하도록 제한하는 것
 *    입력 데이터 타입이 다르다면 객체를 바꾸면서 비싼 복사 비용
 * 5. boolean보다는 원소 2개짜리 열거 타입이 나음
 *    열거 타입을 사용하면 코드 읽고 쓰기가 쉬워지고 선택지를 추가하기 좋음
 *
 *
 */
public class item51 {
}
