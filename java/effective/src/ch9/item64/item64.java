package ch9.item64;

/*
 * item64. 객체는 인터페이스를 사용해 참조하라
 *
 *  적합한 인터페이스가 있다면 매개변수뿐만 아니라
 *  반환값, 변수, 필드 전부 인터페이스 타입으로 선언해야 함
 * 실제 클래스를 사용해야 하는 상황은 생성자로 생성할 때 뿐
 *
 *  인터페이스를 타입으로 사용하면 프로그램이 훨씬 유연해짐
 * 나중에 구현 클래스를 바꾸고 싶다면 인터페이스를 구현한
 * 다른 클래스의 생성자를 호출하면 됨
 * 
 *  적합한 인터페이스가 없는 경우
 * 1. String, BigInteger 등의 값 클래스
 * 2. 클래스 기반의 프레임워크가 제공하는 객체
 *  이 경우 기반 클래스를 사용해 참조하는 것이 좋음
 * 3. 인터페이스에 없는 특별한 메소드를 제공하는 클래스
 *  클래스 타입을 사용하려면 추가 메소드를 사용하는 경우를 최소화해야 함
 * + 그 외의 다수
 * => 적합한 인터페이스가 없다면 클래스 계층구조 중 꼭 필요한 기능을 만족하는
 *    가장 덜 구체적인 클래스를 타입으로 사용해야 함
 * 
 *
 *
 *
 */
public class item64 {
}
