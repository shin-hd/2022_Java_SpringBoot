package ch10.item70;

/*
 * item70. 복구할 수 있는 상황에는 검사 예외를,
 *         프로그래밍 오류에는 런타임 예외를 사용하라
 *
 *  자바에서 제공하는 throwable 타입 세 가지
 * 1. 검사 예외
 * 2. 런타임 예외
 * 3. 에러
 *
 *  각 타입을 사용하는데 참고할만한 지침
 * 1. 호출하는 쪽에서 복구하리라 여겨지는 상황이라면 검사 예외를 사용
 *  검사와 비검사 예외를 구분하는 기본 규칙으로,
 *  검사 예외를 던지면 호출자가 catch로 잡아 처리하거나 더 바깥으로 전파하도록 강제하게 됨
 *  검사 예외 각각은 메소드를 호출했을 때 발생할 수 있는 유력한 결과임을 사용자에게 알려주는 것
 *
 *  비검사 throwable은 런타임 예외와 에러
 *  프로그램에서 잡을 필요가 없거나 잡으면 안되며,
 *  복구가 불가능하건나 더 이상 실행하는게 손해라는 의미
 * 2. 프로그래밍 오류를 나타낼 대는 런타임 예외를 사용
 *  런타임 예외는 전제조건을 만족하지 못했을 때 발생
 *  문제는 복구할 수 있는 상황인지 오류인지 명확히 구분되지 않음
 *  따라서 API 설계자가 복구 가능하다고 믿는다면 검사 예외를,
 *  그렇지 않다면 런타임 예외를 사용
 *
 * 3. 에러는 보통 JVM이 자원 부족, 불변식 깨짐 등
 *  더 이상 수행을 계속할 수 없는 상황을 나타냄
 *  Error 클래스를 상속해 하위 클래스를 만들지 않는 것이 업계 규약이므로
 *  구현한 비검사 throwable은 모두 RuntimeException의 하위 클래스여야 함
 *  Error는 throw로 직접 던지지도 말아야 함
 *
 *  Exception, RuntimeException, Error를 상속하지 않는 throwable도 만들 수 있음
 * 자바 언어 명세에서 직접 다루지는 않지만, 암묵적으로 일반 검사 예외처럼 다룸
 * 하지만 이런 throwable은 써서 이로울 게 없으니 절대 사용하면 안됨
 *
 */
public class item70 {
}
