package ch10.item72;

/*
 * item72. 표준 예외를 사용하라
 *
 *  예외도 다른 코드와 마찬가지로 재사용하는 것이 좋으며,
 * 자바 라이브러리는 대부분의 API에서 쓰기에 충분한 수의 예외를 제공함
 * 
 *  표준 예외를 재사용하는 장점
 * 1. API를 다른 사람이 익히고 사용하기 쉬워짐
 * 2. API를 사용한 프로그램도 낯선 예외를 쓰지 않아 읽기 쉬워짐
 * 3. 예외 클래스 수가 적을수록 메모리 사용량도 줄고 클래스 적재시간도 적게 걸림
 *
 *  가장 많이 재사용되는 예외
 * : IllegalArgumentException
 * 호출자가 인수로 부적절한 값을 넘길 때 던지는 예외
 * 
 *  대상 객체 상태가 호출된 메소드를 수행하기에 적합하지 않을 때 주로 던지는
 * IllegalStateException도 자주 재사용됨
 *
 *  메소드가 던지는 모든 예외를 잘못된 인수나 상태라고 뭉뚱그릴 수도 있지만,
 * 특수한 일부는 따로 구분해 쓰는게 보통
 * null을 건내면 NullPointerException을,
 * 시퀀스의 허용 범위를 넘는 값을 건내면 IndexOutOfBoundsException을 던짐
 *
 *  스레드에서 사용하려고 설계한 객체를 여러 스레드가 동시에 수정하려 할 때 던지는
 * ConcurrentModificationException도 자주 재사용됨
 * 동시 수정을 확실히 검출할 방법이 없어서, 문제가 생길 가능성을 알려주는 역할로 쓰임
 *
 *  UnsupportedOperationException은 클라이언트가 요청한 동작을
 * 대상 객체가 지원하지 않을 때 던짐
 * 대부분 객체는 자신이 정의한 메소드를 모두 지원하므로 흔히 쓰이지는 않지만,
 * 구현하려는 인터페이스의 메소드 일부를 구현할 수 없을 때 쓰임
 *
 *  Exception, RuntimeException, Throwable, Error는 직접 재사용하면 안됨
 * 다른 예외들의 상위 클래스이므로 안정적으로 테스트할 수 없음
 *
 *  위에서 말한 예외 말고도, 상황에 부합한다면 항상 표준 예외를 재사용하면 됨
 * API 문서를 참고해서 어떤 상황에 예외가 던져지는지도 확인해서
 * 예외가 던져지는 맥락에 부합할 때만 재사용
 * 
 *  표준 예외를 확장해도 좋지만, 예외는 직렬화할 수 있다는 사실을 인지해야 함
 *
 *  예외가 상호 배타적이지 않아서 어떤 예외를 써야할지 선택이 어려울 수 있는데,
 * 인수 값이 무엇이든 실패할 거라면 IllegalStateException을,
 * 그렇지 않다면 IllegalArgumentException을 던지는 것이 일반적임
 * 
 */
public class item72 {
}
