package ch10.item73;

/*
 * item73. 추상화 수준에 맞는 예외를 던지라
 *
 *  메소드가 저수준 예외를 처리하지 않고 바깥으로 전파해버리면
 * 종종 수행하려는 일과 관련 없어 보이는 예외가 튀어나옴
 * 프로그래머를 당황시키고 내부 구현방식을 드러내어버림
 * => 상위 계층에서는 저수준 예외를 잡아서
 *    자신의 추상화 수준에 맞는 예외로 바꿔 던져야 함 : 예외 번역
 * 
 *  예외를 번역할 때, 저수준 예외가 디버깅에 도움이 된다면
 * 예외 연쇠를 사용하는 것이 좋음
 * 예외 연쇄 : 문제의 근본 원인인 저수준 예외를 실어 보내는 방식
 * getCause 메소드를 통해 필요하면 언제든지 꺼내볼 수 있음
 *
 * 고수준 예외 생성자는 상위 클래스의 생성자에 '원인'을 건네주어,
 * 최종적으로 Throwable(Throwable) 싱성자까지 건네지게 함
 *
 * 대부분 표준 예외는 예외 연쇄용 생성자를 갖추고 있으며,
 * 그렇지 않더라도 initCause 메소드를 이용해서 '원인'을 직접 못박을 수 있음
 *
 *  무턱대고 예외를 전파하는 것보다 예외 번역이 우수한 방법이지만,
 * 남용하면 안됨
 * 저수준 매소드가 반드시 성공하도록 해서 아래 계층에서는
 * 예외가 발생하지 않도록 하는 것이 최선
 * 상위 계층 매개변수 값을 미리 검사해서 예외 발생을 미리 방지할 수 있음
 *
 *  차선책으로는, 상위 계층에서 예외를 처리해서
 * 문제를 API 호출자에게까지 전파하지 않는 방법이 있음
 * 적절한 로깅 기능을 활용해서 기록해두면
 * 클라이언트 코드와 사용자에게 문제를 전파하지 않으면서
 * 프로그래머가 로그를 분석해 조치를 취할 수 있게 해줌
 */
public class item73 {
}
