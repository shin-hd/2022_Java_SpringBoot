package ch10.item75;

/*
 * item75. 예외의 상세 메시지에 실패 관련 정보를 담아라
 *
 *  프로그램이 실패하면 실패 원인을 분석하기 위한 정보가 필요함
 * 사후 분석을 위해 실패 순간의 상황을 포착해서 예외의 상태 메시지에 담아야 함
 *
 *  실패 순간을 포착하려면 발생한 예외에 관여된
 * 모든 매개변수와 필드 값을 실패 메시지에 담아야 함
 * 예외 발생 원인은 다 다르므로,
 * 현상을 봐야 무엇을 고쳐야 하는지 분석하는 데 도움이 됨
 *
 *  예외 상세 메시지와 최종 사용자에게 보여줄 오류 메시지를 혼동하면 안됨
 * 최종 사용자에게는 친절한 안내 메시지를 보여주어야 하지만,
 * 예외 메시지는 가독성보다는 내용이 훨씬 중요함
 * 예외 메시지 소비층은 프로그래머와 SRE 엔지니어이기 때문
 *
 *  실패를 적절히 포착하기 위해 필요한 정보를 예외 생성자에서 모두 받아서
 * 상세 메시지까지 미리 생성해놓는 방법도 괜찮음
 * 이렇게 하면 프로그래머가 던지는 예외는 자연스럽게 실패를 더 잘 포착함
 * 또한 고품질의 상세 메시지를 만들어내는 코드를 예외 클래스 안으로 모아서
 * 사용자가 메시지를 만드는 작업을 하지 않아도 됨
 *
 *  예외는 실패와 관련한 정보를 얻을 수 있는 접근자 메소드를 제공하는 것이 좋음
 * 포착한 실패 정보는 예외 상황을 복구하는 데 유용할 수 있어서
 * 비검사 예외보다는 검사 예외에서 더 도움되지만,
 * 비검사 예외도 제공하는 것을 권장 
 * 
 * 
 *
 */
public class item75 {
}
